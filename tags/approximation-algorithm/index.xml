<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Approximation Algorithm on Stay hungry. Stay foolish </title>
    <link>https://sunprinces.github.io/learning/tags/approximation-algorithm/</link>
    <description>Recent content in Approximation Algorithm on Stay hungry. Stay foolish </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2017. All rights reserved.</copyright>
    <lastBuildDate>Sat, 12 Aug 2017 20:39:07 +0200</lastBuildDate>
    
	<atom:link href="https://sunprinces.github.io/learning/tags/approximation-algorithm/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Advanced Algorithm - Bin Packing Problem</title>
      <link>https://sunprinces.github.io/learning/2017/08/advanced-algorithm---bin-packing-problem/</link>
      <pubDate>Sat, 12 Aug 2017 20:39:07 +0200</pubDate>
      
      <guid>https://sunprinces.github.io/learning/2017/08/advanced-algorithm---bin-packing-problem/</guid>
      <description>&lt;p&gt;從前兩講關於&lt;strong&gt;分配&lt;/strong&gt; (在一堆物品中，決定哪些是要拿的一群，哪些不拿) 的最佳化問題中，我們延伸出新的問題，&lt;strong&gt;Bin Packing Problem&lt;/strong&gt;。不同於在 &lt;a href=&#34;https://sunprinces.github.io/learning/2017/07/advanced-algorithm---knapsack-problem/&#34;&gt;Knapsack Problem&lt;/a&gt; 中，我們只有一個背包(可以想成你聘了一個工人背一個背包)；在Bin Packing 問題中，要取走&lt;strong&gt;所有&lt;/strong&gt;寶物(所有寶物的重量都小於 1 單位)，而你需要聘請一些工人來搬，但今天每個工人都只帶了一個負重為 1 單位的包包，該如何分配這些寶物(雖說是寶物，但其實我們不care價值惹)，使得需要聘請的工人為最少？&lt;/p&gt;

&lt;p&gt;簡單的 formulation 如下：&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Advanced Algorithm - Subset Sum Problem</title>
      <link>https://sunprinces.github.io/learning/2017/07/advanced-algorithm---subset-sum-problem/</link>
      <pubDate>Tue, 11 Jul 2017 23:36:01 +0800</pubDate>
      
      <guid>https://sunprinces.github.io/learning/2017/07/advanced-algorithm---subset-sum-problem/</guid>
      <description>&lt;p&gt;Subset Sum Problem 與 Knapsack Problem 相同，也是一個 NPC 問題(可以想成 Knapsack Problem weight 均為 1 的特例)。而在 Knapsack Problem 中，我們發展出&lt;strong&gt;等差&lt;/strong&gt; 的rounding 技巧，犧牲精確度去換取更低的時間複雜度，而這一講中，將利用&lt;strong&gt;等比&lt;/strong&gt;的方式去做 rounding 。
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Advanced Algorithm - Knapsack Problem</title>
      <link>https://sunprinces.github.io/learning/2017/07/advanced-algorithm---knapsack-problem/</link>
      <pubDate>Sat, 01 Jul 2017 22:56:26 +0800</pubDate>
      
      <guid>https://sunprinces.github.io/learning/2017/07/advanced-algorithm---knapsack-problem/</guid>
      <description>&lt;p&gt;背包問題為一個典型的最佳化問題，想像你來到了一個寶庫，裡頭有一些寶物，都有各自的價值和重量，但你只帶了一個背包(而且負重還有限制)，要怎麼取寶物才能在背得走的前提下，帶走價值總和儘可能高的寶物們呢？&lt;/p&gt;

&lt;p&gt;這裡我們考慮最基本的 0/1 - Knapsack Problem 。簡單的 formulation 如下:&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>