<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Randomized Algorithm on Stay hungry. Stay foolish </title>
    <link>https://sunprinces.github.io/learning/tags/randomized-algorithm/</link>
    <description>Recent content in Randomized Algorithm on Stay hungry. Stay foolish </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2017. All rights reserved.</copyright>
    <lastBuildDate>Sat, 14 Oct 2017 00:24:36 +0800</lastBuildDate>
    
	<atom:link href="https://sunprinces.github.io/learning/tags/randomized-algorithm/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Advanced Algorithm - Hash Table - Lec3</title>
      <link>https://sunprinces.github.io/learning/2017/10/advanced-algorithm---hash-table---lec3/</link>
      <pubDate>Sat, 14 Oct 2017 00:24:36 +0800</pubDate>
      
      <guid>https://sunprinces.github.io/learning/2017/10/advanced-algorithm---hash-table---lec3/</guid>
      <description>在 第一講中，我們證明了有很高的機率，任意 slot 中 element 的個數均為 $\mathcal{\Theta}(\frac{\ln n}{\ln (\ln n)})$ ，而這一講想討論的是，如果今天我們手上有兩個 hash function (from same $\mathcal{H}$)可以選，每次我們就看哪一個 $h$ 回傳的 slot 中元素比較少，就將 element hash 到 slot，那麼現在 $\mathbb{E}[\, \text{max num of elements in any slots} \, ]$ ?
Chernoff Bound $n$ 個 identical R.V. 的相加，想 measure 其偏離平均值的機率
Let $X_1, X_2, \cdots, X_n$ be independent binary R.V with $\mathbb{E}[X_i] = p_i$
$X = \sum_i X_i$, $\; \mu = \mathbb{E}[X] = \sum_i p_i$ $\; p = \frac{\mu}{n} = \text{avg}(p_i)$--</description>
    </item>
    
    <item>
      <title>Advanced Algorithm - Hash Table - Lec2</title>
      <link>https://sunprinces.github.io/learning/2017/10/advanced-algorithm---hash-table---lec2/</link>
      <pubDate>Thu, 05 Oct 2017 00:20:42 +0800</pubDate>
      
      <guid>https://sunprinces.github.io/learning/2017/10/advanced-algorithm---hash-table---lec2/</guid>
      <description>&lt;p&gt;Hashing 的一個 criteria 是希望儘可能不要發生 collision (也就是 Worst Case 也在 &lt;span&gt;$\mathcal{O}(1)$&lt;/span&gt; lookup)，今天假設我們已知元素的個數，該如何設計一個 hash function 使得不會有任何 collition 發生？&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Advanced Algorithm - Weighted Set Cover</title>
      <link>https://sunprinces.github.io/learning/2017/08/advanced-algorithm---weighted-set-cover/</link>
      <pubDate>Fri, 18 Aug 2017 21:19:19 +0200</pubDate>
      
      <guid>https://sunprinces.github.io/learning/2017/08/advanced-algorithm---weighted-set-cover/</guid>
      <description>&lt;p&gt;呈前一講，我們對&lt;strong&gt;有限制的&lt;/strong&gt; WSC 問題有 &lt;span&gt;$l$&lt;/span&gt;-approx. algorithm，但可能並不是太好(比方說 &lt;span&gt;$l=|U|$&lt;/span&gt; 之類)，於是我們嘗試引進一些隨機性，雖然犧牲了 deterministic 的 approx. ratio ，有時候甚至會得到更爛的結果(甚至不滿足 constraint @@)，但可以證明在&lt;strong&gt;大部分&lt;/strong&gt;時候，都可以得到一個&lt;strong&gt;還不錯&lt;/strong&gt; (approx. ratio ISN&amp;rsquo;T too bad)的結果。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>