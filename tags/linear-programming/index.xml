<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Linear Programming on Stay hungry. Stay foolish </title>
    <link>https://sunprinces.github.io/learning/tags/linear-programming/</link>
    <description>Recent content in Linear Programming on Stay hungry. Stay foolish </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2017. All rights reserved.</copyright>
    <lastBuildDate>Wed, 16 Aug 2017 21:19:19 +0200</lastBuildDate>
    
	<atom:link href="https://sunprinces.github.io/learning/tags/linear-programming/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Advanced Algorithm - Weighted Set Cover</title>
      <link>https://sunprinces.github.io/learning/2017/08/advanced-algorithm---weighted-set-cover/</link>
      <pubDate>Wed, 16 Aug 2017 21:19:19 +0200</pubDate>
      
      <guid>https://sunprinces.github.io/learning/2017/08/advanced-algorithm---weighted-set-cover/</guid>
      <description>呈前一講，我們對有限制的 WSC 問題有 $l$-approx. algorithm，但可能並不是太好(比方說 $l=|U|$ 之類)，於是我們嘗試引進一些隨機性，雖然犧牲了 deterministic 的 approx. ratio ，有時候甚至會得到更爛的結果(甚至不滿足 constraint @@)，但可以證明在大部分時候，都可以得到一個還不錯 (approx. ratio ISN&amp;rsquo;T too bad)的結果。
Weighted Set Cover Problem 讓我們明確定義這個問題
Given $U = \lbrace e_1,e_2,\cdots,e_n \rbrace, \, S_1,S_2,\cdots S_k \subseteq U \, \text{with} \, \text{cost}\,(S_i)$
Want: Find a min-cost collection of subsets $C$ such that $\underset{C}{\bigcup} S_i = U$
Formulation Let $x_i = $𝟙[subset $S_i$ is chosen or not]
 \[ \min \sum_i x_i \quad s.</description>
    </item>
    
    <item>
      <title>Advanced Algorithm - Vertex Cover Problem</title>
      <link>https://sunprinces.github.io/learning/2017/08/advanced-algorithm---vertex-cover-problem/</link>
      <pubDate>Mon, 14 Aug 2017 20:49:15 +0200</pubDate>
      
      <guid>https://sunprinces.github.io/learning/2017/08/advanced-algorithm---vertex-cover-problem/</guid>
      <description>&lt;p&gt;這一講會展示將問題轉化為線性規劃的 form (但可能是 ILP)，利用 LP solver 得到解，做 &lt;strong&gt;LP relaxation&lt;/strong&gt; 並證明這個解不會太差 (approx. ratio 不太大)。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Advanced Algorithm - Linear Programming</title>
      <link>https://sunprinces.github.io/learning/2017/08/advanced-algorithm---linear-programming/</link>
      <pubDate>Mon, 14 Aug 2017 20:36:01 +0200</pubDate>
      
      <guid>https://sunprinces.github.io/learning/2017/08/advanced-algorithm---linear-programming/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Definition:&lt;/strong&gt;&lt;br/&gt;
A linear programming is a problem of &lt;em&gt;maximizing&lt;/em&gt; or &lt;em&gt;minimizing&lt;/em&gt; a &lt;strong&gt;linear
multivariate function&lt;/strong&gt; subject to some &lt;strong&gt;linear constraints&lt;/strong&gt;
&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>